#
#  .circleci/config.yml
#  Blockchain
#
#  Created by Maurice A. on 10/1/18.
#  Copyright © 2018 Blockchain Luxembourg S.A. All rights reserved.
#
#  CircleCI
#  --------
#  ‣ Run commands are executed using non-login shells by default, so you must explicitly source any dotfiles as part of the command.
#    It’s possible to specify a multi-line command, each line of which will be run in the same shell.
#
#  ‣ It is currently not possible to delete the cache in CircleCI 2.0
#    Workaround: rename the cache key to force generation of a new cache.
#
#  ‣ Environment variables (e.g. API keys) are defined in the project settings on circleci.com.
#
#  ‣ Your project’s default branch will never auto cancel builds. This feature only applies to non-workflow builds,
#    builds triggered by pushes to GitHub, or workflow builds that use the new build processing feature.
#
#  Fastlane
#  --------
#  ‣ The `setup_circle_ci` Fastlane action must be in the before_all block to perform the following actions:
#    - Create a new temporary keychain for use with Fastlane Match (see the code signing section for more details).
#    - Switch Fastlane Match to readonly mode to make sure CI does not create new code signing certificates or provisioning profiles.
#    - Set up log and test result paths to be easily collectible.
#
#  ‣ Workflows will ignore job-level branching. If you use job-level branching and later add workflows,
#    you must remove the branching at the job level and instead declare it in the workflows section.
#
#  ‣ Builds without workflows require a build job.
#
#  Cocoapods
#  ---------
#  ‣ Data persisted as a result of running `pod install`:
#    - Blockchain.xcworkspace
#    - Podfile
#    - Podfile.lock
#    - Pods/
#
#  ‣ The Cocoapods master repository is fetched via the CircleCI mirror for better performance.
#
#  ‣ Cocoapods is not specified in the Gemfile because it already comes bundled with the software container.
#    Developers must install it manually using `sudo gem install cocoapods`.
#
#  Ruby Gems
#  ---------
#  ‣ Running `gem env` will show the installation directory of binaries
#
defaults: &defaults
  working_directory: /Users/distiller/project
  macos:
    xcode: "10.1.0"
  shell: /bin/bash --login -o pipefail
# --- Jobs ---
version: 2
jobs:
  # Install Dependencies
  install_deps:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - node-cache-{{ .Environment.NODE_VERSION }}
      - run:
          name: Install Node
          command: |
            cd ~
            git clone https://github.com/creationix/nvm.git .nvm
            cd .nvm && git checkout v0.33.11 && . nvm.sh
            nvm install $NODE_VERSION && nvm use $NODE_VERSION
            if [[ $(npm -v | grep -v "5.6.0") ]]; then
              npm install -g npm@5.6.0
            fi
      - save_cache:
          key: node-cache-{{ .Environment.NODE_VERSION }}
          paths:
            - ~/.nvm
            - /usr/local/lib/node_modules
      - checkout
      - run:
          name: Initialize Submodules
          command: git submodule update --init
      - run:
          name: Build JS
          command: |
            . ~/.nvm/nvm.sh
            sh scripts/install-js.sh
            sh scripts/build-js.sh
      - restore_cache:
          keys:
            - gems-cache-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Gems
          command: |
            export LANG=en_US.UTF-8
            export LC_ALL=en_US.UTF-8
            gem env
            sudo gem cleanup
            sudo gem install bundler
            bundle install --path vendor/bundle
            bundle clean
      - save_cache:
          key: gems-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Config Firebase
          command: |
            git clone -b firebase $CREDENTIALS_REPO /tmp/credentials
            mv /tmp/credentials/Firebase /Users/distiller/project/Blockchain/Firebase
      - persist_to_workspace:
          root: /Users/distiller/project
          paths:
            - ./
  # Build OpenSSL library
  build_openssl:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /Users/distiller/project
      - restore_cache:
          keys:
            - openssl-cache-{{ .Environment.TARGET_IOS_SDK_VERSION }}
      - run:
          name: Build OpenSSL
          command: |
            if [ ! -d "./Submodules/OpenSSL-for-iPhone/bin" ]; then
              cd Submodules/OpenSSL-for-iPhone
              sh build-libssl.sh --cleanup
            fi
      - save_cache:
          key: openssl-cache-{{ .Environment.TARGET_IOS_SDK_VERSION }}
          paths:
            - ~/project/Submodules/OpenSSL-for-iPhone
      - persist_to_workspace:
          root: /Users/distiller/project
          paths:
            - ./Submodules/OpenSSL-for-iPhone
  # Install Pods
  install_pods:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /Users/distiller/project
      - restore_cache:
          keys:
            - pods-cache-{{ checksum "Podfile.lock" }}
      - run:
          name: Install Pods
          command: |
            pod --version
            if [ ! -d "/Users/distiller/.cocoapods" ]; then
              curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
            fi
            pod install --verbose
      - save_cache:
          key: pods-cache-{{ checksum "Podfile.lock" }}
          paths:
            - ~/.cocoapods
            - ~/Library/Caches/CocoaPods
      - persist_to_workspace:
          root: /Users/distiller/project
          paths:
            - ./Pods
            - ./Blockchain.xcworkspace
  # Run tests job:
  # - execute unit tests.
  run_tests:
    <<: *defaults
    environment:
      FL_OUTPUT_DIR: test-results
    steps:
      - attach_workspace:
          at: /Users/distiller/project
      - run:
          name: Fastlane
          command: |
            export LANG=en_US.UTF-8
            export LC_ALL=en_US.UTF-8
            export SLACK_WEBHOOK_URL=$SLACK_WEBHOOK_URL
            bundle exec fastlane scan
      - run:
          name: Codesign info
          command: security find-identity -v -p codesigning
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan
  archive_and_export:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /Users/distiller/project
      - run:
          name: Archive & Export Application
          command: |
            export LANG=en_US.UTF-8
            export LC_ALL=en_US.UTF-8
            export CREDENTIALS_REPO=$CREDENTIALS_REPO
            export FASTLANE_USER=$FASTLANE_USER
            bundle exec fastlane match
            git clone -b xcodebuild $CREDENTIALS_REPO /tmp/xcodebuild
            xcodebuild -workspace Blockchain.xcworkspace -scheme Blockchain -sdk iphoneos -configuration Release archive -archivePath ./output/Blockchain.xcarchive
            xcodebuild -exportArchive -archivePath output/Blockchain.xcarchive -exportOptionsPlist /tmp/xcodebuild/exportOptions.plist -exportPath ./output
      - store_artifacts:
          path: output
# --- Workflows ---
workflows:
  version: 2
  # Execute tests only.
  build_and_test:
    jobs:
      - install_deps:
          filters:
            branches:
              only:
                - ci
                - dev
                - maurice/IOS-1618/automate-build-upload
                - release
      - build_openssl:
          requires:
            - install_deps
      - install_pods:
          requires:
            - install_deps
      - run_tests:
          requires:
            - install_deps
            - build_openssl
            - install_pods
      - archive_and_export:
          requires:
            - run_tests